<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net472</TargetFramework>

    <!-- This target will run when MSBuild is collecting the files to be packaged, and we'll implement it below. This property controls the dependency list for this packaging process, so by adding our custom property we hook ourselves into the process in a supported way. -->
    <TargetsForTfmSpecificBuildOutput>$(TargetsForTfmSpecificBuildOutput);CopyProjectReferencesToPackage</TargetsForTfmSpecificBuildOutput>

    <!-- This property tells MSBuild where the root folder of the package's build assets should be. Because we are not a library package, we should not pack to 'lib'. Instead, we choose 'tasks' by convention. -->
    <BuildOutputTargetFolder>tasks</BuildOutputTargetFolder>

    <!-- NuGet does validation that libraries in a package are exposed as dependencies, but we _explicitly_ do not want that behavior for MSBuild tasks. They are isolated by design. Therefore we ignore this specific warning. -->
    <NoWarn>NU5100</NoWarn>

    <!-- Tell the SDK to generate a deps.json file -->
    <GenerateDependencyFile>true</GenerateDependencyFile>

    <GenerateNuspecDependsOn>$(GenerateNuspecDependsOn);ReadPackageVersionFromOutputAssembly</GenerateNuspecDependsOn>
  </PropertyGroup>

  <PropertyGroup Condition="'$(GITHUB_ACTIONS)' == 'true'">
    <ContinuousIntegrationBuild>true</ContinuousIntegrationBuild>
  </PropertyGroup>

  <PropertyGroup>
    <AssemblyVersion>0.1.*</AssemblyVersion>
    <Deterministic>false</Deterministic>
  </PropertyGroup>

  <PropertyGroup>
    <IsPackable>true</IsPackable>
    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
    <PackageId>$(AssemblyName)</PackageId>
    <PackageLicenseExpression>MIT</PackageLicenseExpression>
    <RequireLicenseAcceptance>true</RequireLicenseAcceptance>
    <AutoGenerateAssemblyVersion>true</AutoGenerateAssemblyVersion>
    <Authors>Aliaksandr Maletski</Authors>
    <Description></Description>
    <PackageTags>nanoFramework;MSBuild;C#;csharp;netnf;ResourceManager</PackageTags>
    <PackageProjectUrl>https://github.com/AlexanderMaleckij/nanoFramework.MSBuildTasks</PackageProjectUrl>
    <RepositoryUrl>https://github.com/AlexanderMaleckij/nanoFramework.MSBuildTasks</RepositoryUrl>
    <RepositoryType>git</RepositoryType>
    <PackageIcon>nf-logo.png</PackageIcon>
    <PackageReadmeFile>README.md</PackageReadmeFile>
  </PropertyGroup>

  <ItemGroup>
    <None Include="..\..\README.md" Pack="true" Visible="false" PackagePath="\" />
    <None Include="nuget\**" Pack="true" PackagePath="\" />
  </ItemGroup>
  
  <ItemGroup>
    <Reference Include="System.ComponentModel.DataAnnotations" />
    <Reference Include="System.Windows.Forms" />
    <PackageReference Include="Microsoft.Build.Framework" Version="17.9.5" />
    <PackageReference Include="Microsoft.Build.Utilities.Core" Version="17.9.5" />
    <PackageReference Include="Microsoft.Extensions.DependencyInjection" Version="8.0.0" />
    <PackageReference Include="Microsoft.NETFramework.ReferenceAssemblies" Version="1.0.3" />
    <PackageReference Include="System.IO.Abstractions" Version="20.0.15" />

    <!-- marks all packages as 'local only' so they don't end up in the nuspec -->
    <PackageReference Update="@(PackageReference)" PrivateAssets="All" />
  </ItemGroup>

  <ItemGroup>
    <AssemblyAttribute Include="System.Runtime.CompilerServices.InternalsVisibleTo">
      <_Parameter1>$(MSBuildProjectName).UnitTests</_Parameter1>
    </AssemblyAttribute>
  </ItemGroup>

  <!-- This is the target we defined above. It's purpose is to add all of our PackageReference and ProjectReference's runtime assets to our package output.  -->
  <Target Name="CopyProjectReferencesToPackage" DependsOnTargets="ResolveReferences">
    <ItemGroup>
      <!-- The TargetPath is the path inside the package that the source file will be placed. This is already precomputed in the ReferenceCopyLocalPaths items' DestinationSubPath, so reuse it here. -->
      <BuildOutputInPackage Include="@(ReferenceCopyLocalPaths)" TargetPath="%(ReferenceCopyLocalPaths.DestinationSubPath)" />
    </ItemGroup>
  </Target>

  <!-- This target adds the generated deps.json file to our package output -->
  <Target Name="AddBuildDependencyFileToBuiltProjectOutputGroupOutput" BeforeTargets="BuiltProjectOutputGroup" Condition=" '$(GenerateDependencyFile)' == 'true'">
    <ItemGroup>
      <BuiltProjectOutputGroupOutput Include="$(ProjectDepsFilePath)" TargetPath="$(ProjectDepsFileName)" FinalOutputPath="$(ProjectDepsFilePath)" />
    </ItemGroup>
  </Target>

  <!-- This target sets package version equal to assembly version -->
  <Target Name="ReadPackageVersionFromOutputAssembly" DependsOnTargets="Build">
    <GetAssemblyIdentity AssemblyFiles="$(TargetPath)">
      <Output TaskParameter="Assemblies" ItemName="PackAssembly" />
    </GetAssemblyIdentity>
    <PropertyGroup>
      <PackageVersion>%(PackAssembly.Version)</PackageVersion>
    </PropertyGroup>
  </Target>
  
</Project>
